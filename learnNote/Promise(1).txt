

Promise：
     是一个构造函数，自己身上有all、reject、resolve这几个眼熟的方法，
     原型上有then、catch等同样很眼熟的方法。
     这么说用Promise new出来的对象肯定就有then、catch方法。
     Promise 内部的错误不会影响到 Promise 外部的代码，通俗的说法就是“Promise 会吃掉错误”

构造Promise对象：
     var p = new Promise(function(resolve, reject){
          console.log(1111111)//同步
          resolve(222222222);//异步
          console.log(3333333)//同步
     });
     p.then(function(value){
         console.log(value)
     }) 
    结果：1,3,2 而不是1,2,3
    Promise的队列优先级要高于setTimeout的队列
  注意！我只是new了一个对象，并没有调用它，我们传进去的函数就已经执行了，这是需要注意的一个细节。
  所以我们用Promise的时候一般是包在一个函数中，在需要的时候去运行这个函数，如：
  
  function runAsync(){
       var p = new Promise(function(resolve, reject){
            resolve('随便什么数据');
       });

       return p;            
    }

    runAsync() 


Promise.resolve()：  http://es6.ruanyifeng.com/#docs/promise
       Promise.resolve('foo')
       // 等价于
       new Promise(resolve => resolve('foo'))

       （1）参数是一个 Promise 实例
       （2）参数是一个thenable对象
       （3）参数不是具有then方法的对象，或根本就不是对象
       （4）不带有任何参数
Promise.reject()：   http://es6.ruanyifeng.com/#docs/promise
        Promise.reject('出错了');
       // 等同于
       new Promise((resolve, reject) => reject('出错了'))
       
       注意，Promise.reject()方法的参数，会原封不动地作为reject的理由，变成后续方法的参数。
       这一点与Promise.resolve方法不一致。

Promise.prototype.then()：
        then方法会返回一个新的Promise实例，该实例由Promise.resolve()或Promise.reject()构成。
        Promise.resolve()或Promise.reject()里面的resolve（）或reject（）中的参数是then函数里面return语句的返回值。

Promise.prototype.catch():
        它其实是.then(null, rejection)的简写，用于指定发生错误时的回调。

Promise.all():
    Promise.all()方法用于将多个Promise实例，包装成一个新的Promise实例.
    例如：var p = Promise.all([p1, p2, p3]);
    新的Promise实例p的状态由p1, p2, p3决定：
    当p1, p2, p3的状态都为完成态时，p为完成态。
    当p1, p2, p3中任一一个状态为失败态，则p为失败态。
    
Promise.race():
    Promise.race()方法用于将多个Promise实例，包装成一个新的Promise实例.
    例如：var p = Promise.all([p1, p2, p3]);
    不同的是，只要p1, p2, p3中任意一个实例率先改变状态，则p的状态就跟着改变，而且状态由率先改变的实例决定。

Promise.done():
     https://segmentfault.com/a/1190000007685095
Promise.finally():
     https://segmentfault.com/a/1190000007685095
 